// LLM-backed tool registry (no local mock execution). The LLM is prompted with scenario + arg + result schemas.

export interface ToolDefinition<Args extends Record<string, any>, R> {
  name: string;
  description: string;
  argSchema: any;
  resultSchema: any;
  sampleResult?: R;
}

export function parseScenario(scenario: string) {
  const memberMatch = scenario.match(/member_id\s+([A-Za-z0-9]+)/i);
  const allergies = Array.from(scenario.matchAll(/Allergies?:\s*([^\.\n]+)/gi)).flatMap(m => m[1].split(/,\s*/));
  return { member_id: memberMatch?.[1] || 'M000000', allergies: allergies.map(a=>a.trim()).filter(Boolean) };
}

export const tools: ToolDefinition<any, any>[] = [
  { name:'noop', description:'No-op tool used only to persist scenario/context. Returns a simple acknowledgement.', argSchema:{ type:'object', properties:{} }, resultSchema:{ type:'object', properties:{ ok:{type:'boolean'} }, required:['ok'] }, sampleResult:{ ok:true } },
  { name:'verify_member_identity', description:'Authenticate member and mark session as authenticated', argSchema:{ type:'object', required:['member_id','DOB'], properties:{ member_id:{type:'string'}, DOB:{type:'string'} } }, resultSchema:{ type:'object', required:['verified','authenticated','member_id','member_name','needs_mfa'], properties:{ verified:{type:'boolean'}, authenticated:{type:'boolean'}, member_id:{type:'string'}, member_name:{type:'string'}, needs_mfa:{type:'boolean'}, reason:{type:'string'} } }, sampleResult:{ verified:true, authenticated:true, member_id:'M123456', member_name:'John Smith', needs_mfa:false, reason:'match' } },
  { name:'ndcLookup', description:'Resolve a drug + dose + quantity to concrete NDC choices', argSchema:{ type:'object', required:['drugName','dose','count'], properties:{ drugName:{type:'string'}, dose:{type:'string'}, count:{type:'integer'} } }, resultSchema:{ type:'object', required:['result'], properties:{ result:{ type:'array', items:{ type:'object', required:['ndc','drug_name','strength','dosage_form','brand_generic','match','count'], properties:{ ndc:{type:'string'}, drug_name:{type:'string'}, strength:{type:'string'}, dosage_form:{type:'string'}, brand_generic:{type:'string'}, match:{type:'boolean'}, count:{type:['integer','string']} } }, minItems:1 }, context:{type:'string'} } }, sampleResult:{ result:[{ ndc:'12345', drug_name:'Metformin', strength:'1000mg', dosage_form:'TAB', brand_generic:'GENERIC', match:true, count:180 }], context:'Primary match first.' } },
  { name:'getActivePrescriptions', description:'List active prescriptions for authenticated member. Speak drug names only when listing results unless other details are required to disambiguate.', argSchema:{ type:'object', properties:{} }, resultSchema:{ type:'object', required:['member_id','prescriptions'], properties:{ member_id:{type:'string'}, prescriptions:{ type:'array', items:{ type:'object', required:['prescription_id','drug_name','ndc','strength','quantity','status','refills_remaining'], properties:{ prescription_id:{type:'string'}, drug_name:{type:'string'}, ndc:{type:'string'}, strength:{type:'string'}, quantity:{type:'string'}, status:{type:'string'}, refills_remaining:{type:'integer'}, last_filled:{type:'string'}, pharmacy:{type:'string'}, days_supply:{type:'integer'}, member_cost:{type:'number'} } } } } }, sampleResult:{ member_id:'M123456', prescriptions:[{ prescription_id:'RX1000', drug_name:'Metformin', ndc:'12345678901', strength:'1000mg', quantity:'180', status:'ACTIVE', refills_remaining:3, last_filled:'2025-08-15', pharmacy:'MailOrder', days_supply:90, member_cost:30 }] } },
  { name:'calculateRxPrice', description:'Compute member and plan cost breakdown for an NDC', argSchema:{ type:'object', required:['ndc'], properties:{ ndc:{type:'string'} } }, resultSchema:{ type:'object', required:['result'], properties:{ result:{ type:'object', required:['member_cost','plan_paid','pricing_basis'], properties:{ member_cost:{type:'number'}, plan_paid:{type:'number'}, pricing_basis:{type:'string'}, drug_cost:{type:'number'}, dispensing_fee:{type:'number'}, total_cost:{type:'number'}, copay:{type:'number'}, coinsurance:{type:'number'}, deductible_applied:{type:'number'}, oop_applied:{type:'number'}, formulary_tier:{type:'integer'}, formulary_status:{type:'string'}, days_supply:{type:'integer'}, quantity:{type:'integer'}, notes:{type:'string'} } } } }, sampleResult:{ result:{ member_cost:30, plan_paid:120, pricing_basis:'AWP-15%', drug_cost:140, dispensing_fee:1.5, total_cost:141.5, copay:30, coinsurance:0, deductible_applied:0, oop_applied:30, formulary_tier:1, formulary_status:'Preferred', days_supply:90, quantity:90, notes:'Simulated pricing.' } } },
  { name:'getFormularyAlternatives', description:'Retrieve formulary alternative NDCs', argSchema:{ type:'object', required:['ndc'], properties:{ planId:{type:'string'}, ndc:{type:'string'} } }, resultSchema:{ type:'object', required:['result'], properties:{ result:{ type:'array', items:{type:'string'} }, context:{type:'string'} } }, sampleResult:{ result:['00011ALT0','00011ALT1'], context:'Lower tier alternatives first.' } },
  { name:'check_prescription_status', description:'Get prescription status (single or list)', argSchema:{ type:'object', properties:{ prescription_id:{type:'string'} } }, resultSchema:{ anyOf:[ { type:'object', required:['prescription_id','drug_name','status','pharmacy'], properties:{ prescription_id:{type:'string'}, drug_name:{type:'string'}, status:{type:'string'}, pharmacy:{type:'string'}, filled_date:{type:'string'}, last_filled:{type:'string'}, pickup_by:{type:'string'}, refills_remaining:{type:'integer'} } }, { type:'object', required:['prescriptions'], properties:{ prescriptions:{ type:'array', items:{ type:'object', required:['prescription_id','drug_name','status','pharmacy'], properties:{ prescription_id:{type:'string'}, drug_name:{type:'string'}, status:{type:'string'}, pharmacy:{type:'string'}, refills_remaining:{type:'integer'} } } } } } ] }, sampleResult:{ prescriptions:[{ prescription_id:'RX1000', drug_name:'Metformin', status:'READY', pharmacy:'MailOrder', refills_remaining:2 }] } },
  { name:'request_refill', description:'Submit a refill request', argSchema:{ type:'object', required:['prescription_id','pharmacy_id'], properties:{ prescription_id:{type:'string'}, pharmacy_id:{type:'string'} } }, resultSchema:{ type:'object', required:['accepted','prescription_id','pharmacy_id','status'], properties:{ accepted:{type:'boolean'}, prescription_id:{type:'string'}, member_id:{type:'string'}, pharmacy_id:{type:'string'}, status:{type:'string'}, reason:{type:'string'}, estimated_ready:{type:'string'}, refills_remaining:{type:'integer'}, message:{type:'string'} } }, sampleResult:{ accepted:true, prescription_id:'RX1000', member_id:'M123456', pharmacy_id:'PHARM1', status:'SUBMITTED', estimated_ready:'2025-09-05', refills_remaining:1, message:'Refill queued.' } },
  { name:'transfer_prescription', description:'Initiate a pharmacy transfer', argSchema:{ type:'object', required:['prescription_id','from_pharmacy_id','to_pharmacy_id'], properties:{ prescription_id:{type:'string'}, from_pharmacy_id:{type:'string'}, to_pharmacy_id:{type:'string'} } }, resultSchema:{ type:'object', required:['transfer_id','prescription_id','from_pharmacy','to_pharmacy','status'], properties:{ transfer_id:{type:'string'}, prescription_id:{type:'string'}, from_pharmacy:{type:'string'}, to_pharmacy:{type:'string'}, status:{type:'string'}, estimated_completion:{type:'string'}, message:{type:'string'} } }, sampleResult:{ transfer_id:'T123', prescription_id:'RX1000', from_pharmacy:'PHARM1', to_pharmacy:'PHARM2', status:'PENDING', estimated_completion:'2025-09-04', message:'Transfer initiated.' } },
  { name:'find_pharmacies', description:'Locate nearby pharmacies', argSchema:{ type:'object', required:['zip_code'], properties:{ zip_code:{type:'string'}, radius_miles:{type:'number', default:10} } }, resultSchema:{ type:'object', required:['pharmacies'], properties:{ pharmacies:{ type:'array', items:{ type:'object', required:['pharmacy_id','name','address','distance_miles','network_in'], properties:{ pharmacy_id:{type:'string'}, name:{type:'string'}, address:{type:'string'}, phone:{type:'string'}, distance_miles:{type:'number'}, hours:{type:'string'}, network_in:{type:'boolean'} } } } } }, sampleResult:{ pharmacies:[{ pharmacy_id:'P1', name:'Pharmacy 1', address:'101 Main St', phone:'555-0001', distance_miles:1.2, hours:'9-6', network_in:true }] } },
  { name:'get_pickup_notifications', description:'List ready-for-pickup items', argSchema:{ type:'object', properties:{} }, resultSchema:{ type:'object', required:['notifications','count'], properties:{ notifications:{ type:'array', items:{ type:'object', required:['prescription_id','drug_name','pharmacy','ready_date','pickup_by'], properties:{ prescription_id:{type:'string'}, drug_name:{type:'string'}, pharmacy:{type:'string'}, ready_date:{type:'string'}, pickup_by:{type:'string'}, notification_sent:{type:'boolean'} } } }, count:{type:'integer'} } }, sampleResult:{ notifications:[{ prescription_id:'RX1000', drug_name:'Metformin', pharmacy:'MailOrder', ready_date:'2025-09-03', pickup_by:'2025-09-10', notification_sent:true }], count:1 } },
  { name:'get_plan_details', description:'Retrieve member plan structure', argSchema:{ type:'object', properties:{ plan_id:{type:'string'} } }, resultSchema:{ type:'object', required:['plan_id','plan_name','plan_type','effective_date','benefits'], properties:{ plan_id:{type:'string'}, plan_name:{type:'string'}, plan_type:{type:'string'}, effective_date:{type:'string'}, formulary:{type:'string'}, benefits:{ type:'object', required:['deductible','out_of_pocket_maximum','copays','coinsurance_after_deductible'], properties:{ deductible:{ type:'object', properties:{ medical:{type:'number'}, pharmacy:{type:'number'} } }, out_of_pocket_maximum:{type:'number'}, copays:{ type:'object', properties:{ tier_1_generic:{type:'number'}, tier_2_preferred_brand:{type:'number'}, tier_3_non_preferred:{type:'number'}, tier_4_specialty:{type:'number'} } }, coinsurance_after_deductible:{type:'number'} } } } }, sampleResult:{ plan_id:'PLN1', plan_name:'Gold Plus', plan_type:'PPO', effective_date:'2025-01-01', formulary:'GENERIC_PREF', benefits:{ deductible:{ medical:1500, pharmacy:200 }, out_of_pocket_maximum:4500, copays:{ tier_1_generic:10, tier_2_preferred_brand:40, tier_3_non_preferred:75, tier_4_specialty:250 }, coinsurance_after_deductible:0.2 } } },
  { name:'check_coverage', description:'Determine coverage status for a drug/service', argSchema:{ type:'object', properties:{ ndc:{type:'string'}, service_code:{type:'string'}, drug_name:{type:'string'} } }, resultSchema:{ type:'object', required:['member_id','drug','coverage_status'], properties:{ member_id:{type:'string'}, drug:{type:'string'}, ndc:{type:'string'}, coverage_status:{type:'string'}, formulary_tier:{type:'integer'}, copay:{type:'number'}, prior_auth_required:{type:'boolean'} } }, sampleResult:{ member_id:'M123456', drug:'Metformin', ndc:'12345678901', coverage_status:'COVERED', formulary_tier:1, copay:10, prior_auth_required:false } },
  { name:'check_prior_auth', description:'Get prior authorization status/details', argSchema:{ type:'object', required:['ndc'], properties:{ ndc:{type:'string'}, pa_id:{type:'string'} } }, resultSchema:{ type:'object', required:['member_id','ndc','pa_id','status'], properties:{ member_id:{type:'string'}, ndc:{type:'string'}, pa_id:{type:'string'}, status:{type:'string'}, approval_date:{type:'string'}, expires:{type:'string'}, approved_quantity:{type:'integer'}, requirements_met:{ type:'array', items:{type:'string'} } } }, sampleResult:{ member_id:'M123456', ndc:'12345678901', pa_id:'PA123', status:'APPROVED', approval_date:'2025-07-01', expires:'2026-07-01', approved_quantity:90, requirements_met:['failed metformin','A1C > 7.5%'] } },
  { name:'get_formulary_details', description:'Show formulary tier and restriction data', argSchema:{ type:'object', required:['plan_id'], properties:{ plan_id:{type:'string'}, drug_class:{type:'string'}, ndc:{type:'string'} } }, resultSchema:{ type:'object', required:['plan_id','formulary_name','tiers','restrictions'], properties:{ plan_id:{type:'string'}, formulary_name:{type:'string'}, tiers:{ type:'array', items:{ type:'object', required:['tier','name','copay'], properties:{ tier:{type:'integer'}, name:{type:'string'}, copay:{type:'number'}, description:{type:'string'} } } }, restrictions:{ type:'object', properties:{ prior_authorization:{type:'boolean'}, step_therapy:{type:'boolean'}, quantity_limits:{type:'boolean'} } } } }, sampleResult:{ plan_id:'PLN1', formulary_name:'GENERIC_PREF', tiers:[{tier:1,name:'Generic',copay:10}], restrictions:{ prior_authorization:true, step_therapy:true, quantity_limits:true } } },
  { name:'get_utilization_summary', description:'Summarize year-to-date benefit usage', argSchema:{ type:'object', properties:{ plan_year:{type:'integer', default:2025} } }, resultSchema:{ type:'object', required:['member_id','plan_year','deductible_status','out_of_pocket','pharmacy_utilization'], properties:{ member_id:{type:'string'}, plan_year:{type:'integer'}, deductible_status:{ type:'object', properties:{ medical_deductible:{ type:'object', properties:{ total:{type:'number'}, used:{type:'number'}, remaining:{type:'number'} } }, pharmacy_deductible:{ type:'object', properties:{ total:{type:'number'}, used:{type:'number'}, remaining:{type:'number'} } } } }, out_of_pocket:{ type:'object', properties:{ maximum:{type:'number'}, used:{type:'number'}, remaining:{type:'number'} } }, pharmacy_utilization:{ type:'object', properties:{ prescriptions_filled:{type:'integer'}, total_cost:{type:'number'}, member_paid:{type:'number'}, plan_paid:{type:'number'} } } } }, sampleResult:{ member_id:'M123456', plan_year:2025, deductible_status:{ medical_deductible:{ total:1500, used:800, remaining:700 }, pharmacy_deductible:{ total:200, used:200, remaining:0 } }, out_of_pocket:{ maximum:4500, used:1200, remaining:3300 }, pharmacy_utilization:{ prescriptions_filled:12, total_cost:2400, member_paid:420, plan_paid:1980 } } },
  { name:'check_step_therapy', description:'Determine step therapy requirements', argSchema:{ type:'object', required:['ndc','plan_id'], properties:{ ndc:{type:'string'}, plan_id:{type:'string'} } }, resultSchema:{ type:'object', required:['member_id','ndc','plan_id','step_therapy_required'], properties:{ member_id:{type:'string'}, ndc:{type:'string'}, plan_id:{type:'string'}, step_therapy_required:{type:'boolean'}, current_step:{type:'integer'}, total_steps:{type:'integer'}, step_requirements:{ type:'array', items:{ type:'object', properties:{ step:{type:'integer'}, requirement:{type:'string'}, status:{type:'string'}, duration:{type:'string'}, eligible:{type:'boolean'} } } } } }, sampleResult:{ member_id:'M123456', ndc:'12345678901', plan_id:'PLN1', step_therapy_required:true, current_step:1, total_steps:3, step_requirements:[{ step:1, requirement:'Try generic first', status:'met' }] } },
  { name:'check_drug_interactions', description:'Identify drug-drug interactions', argSchema:{ type:'object', required:['drug_list'], properties:{ drug_list:{ type:'array', items:{type:'string'} }, member_id:{type:'string'} } }, resultSchema:{ type:'object', required:['drugs_checked','interactions_found','total_interactions'], properties:{ drugs_checked:{ type:'array', items:{type:'string'} }, interactions_found:{ type:'array', items:{ type:'object', properties:{ drug_a:{type:'string'}, drug_b:{type:'string'}, severity:{type:'string'}, mechanism:{type:'string'}, clinical_effect:{type:'string'}, recommendation:{type:'string'}, documentation:{type:'string'} } } }, total_interactions:{type:'integer'}, message:{type:'string'} } }, sampleResult:{ drugs_checked:['Metformin','Atorvastatin'], interactions_found:[{ drug_a:'Metformin', drug_b:'Atorvastatin', severity:'MODERATE', mechanism:'Competition', clinical_effect:'Increased levels', recommendation:'Monitor', documentation:'Level C' }], total_interactions:1 } },
  { name:'find_therapeutic_alternatives', description:'Suggest therapeutic alternatives', argSchema:{ type:'object', required:['drug_name'], properties:{ drug_name:{type:'string'}, indication:{type:'string'}, contraindications:{ type:'array', items:{type:'string'} } } }, resultSchema:{ type:'object', required:['original_drug','alternatives'], properties:{ original_drug:{type:'string'}, indication:{type:'string'}, alternatives:{ type:'array', items:{ type:'object', required:['drug_name','drug_class','mechanism','efficacy','safety_profile','cost_category'], properties:{ drug_name:{type:'string'}, drug_class:{type:'string'}, mechanism:{type:'string'}, efficacy:{type:'string'}, safety_profile:{type:'string'}, cost_category:{type:'string'} } } }, contraindications_considered:{ type:'array', items:{type:'string'} } } }, sampleResult:{ original_drug:'Semaglutide', indication:'T2DM', alternatives:[{ drug_name:'Liraglutide', drug_class:'GLP-1', mechanism:'GLP-1 agonist', efficacy:'High', safety_profile:'Good', cost_category:'HIGH' }], contraindications_considered:[] } },
  { name:'check_clinical_criteria', description:'Evaluate clinical approval criteria', argSchema:{ type:'object', required:['drug_name','indication'], properties:{ drug_name:{type:'string'}, indication:{type:'string'}, age:{type:'integer'} } }, resultSchema:{ type:'object', required:['drug_name','indication','criteria_met','clinical_requirements','approval_recommendation'], properties:{ drug_name:{type:'string'}, indication:{type:'string'}, member_id:{type:'string'}, criteria_met:{type:'boolean'}, clinical_requirements:{ type:'array', items:{ type:'object', required:['requirement','status'], properties:{ requirement:{type:'string'}, status:{type:'string'}, evidence:{type:'string'} } } }, approval_recommendation:{type:'string'} } }, sampleResult:{ drug_name:'Semaglutide', indication:'T2DM', member_id:'M123456', criteria_met:true, clinical_requirements:[{ requirement:'Failed metformin', status:'met' }], approval_recommendation:'APPROVE' } },
  { name:'check_allergies', description:'Assess allergy and cross-sensitivity', argSchema:{ type:'object', required:['drug_name'], properties:{ drug_name:{type:'string'} } }, resultSchema:{ type:'object', required:['member_id','drug_checked','allergy_found','member_allergies','cross_sensitivity_check'], properties:{ member_id:{type:'string'}, drug_checked:{type:'string'}, allergy_found:{type:'boolean'}, member_allergies:{ type:'array', items:{ type:'object', properties:{ allergen:{type:'string'}, reaction:{type:'string'}, severity:{type:'string'}, date_reported:{type:'string'} } } }, cross_sensitivity_check:{ type:'object', properties:{ potential_cross_reactions:{ type:'array', items:{type:'string'} }, safe_to_use:{type:'boolean'} } } } }, sampleResult:{ member_id:'M123456', drug_checked:'Penicillin', allergy_found:true, member_allergies:[{ allergen:'Penicillin', reaction:'Rash', severity:'MILD' }], cross_sensitivity_check:{ potential_cross_reactions:['Amoxicillin'], safe_to_use:false } } },
  { name:'get_dosing_guidance', description:'Provide dosing recommendations', argSchema:{ type:'object', required:['drug_name','indication','age'], properties:{ drug_name:{type:'string'}, indication:{type:'string'}, age:{type:'integer'}, weight:{type:'number'}, renal_function:{type:'string'} } }, resultSchema:{ type:'object', required:['drug_name','indication','patient_age','recommended_dosing','monitoring_parameters'], properties:{ drug_name:{type:'string'}, indication:{type:'string'}, patient_age:{type:'integer'}, recommended_dosing:{ type:'object', properties:{ starting_dose:{type:'string'}, maximum_dose:{type:'string'}, titration_schedule:{type:'string'}, special_considerations:{ type:'array', items:{type:'string'} } } }, age_specific_notes:{type:'string'}, monitoring_parameters:{ type:'array', items:{type:'string'} } } }, sampleResult:{ drug_name:'Lisinopril', indication:'Hypertension', patient_age:47, recommended_dosing:{ starting_dose:'10mg daily', maximum_dose:'40mg daily', titration_schedule:'Increase every 2 weeks', special_considerations:['Adjust in renal impairment'] }, age_specific_notes:'Adult dosing applied', monitoring_parameters:['Blood pressure','Renal function','Potassium'] } },
  { name:'safety_alert_check', description:'Retrieve safety alerts', argSchema:{ type:'object', required:['drug_name'], properties:{ drug_name:{type:'string'}, alert_type:{type:'string'} } }, resultSchema:{ type:'object', required:['drug_name','alert_type_checked','active_alerts','recalls','boxed_warnings'], properties:{ drug_name:{type:'string'}, alert_type_checked:{type:'string'}, active_alerts:{ type:'array', items:{ type:'object', properties:{ alert_type:{type:'string'}, date_issued:{type:'string'}, title:{type:'string'}, summary:{type:'string'}, action_required:{type:'string'}, severity:{type:'string'} } } }, recalls:{ type:'array', items:{type:'object'} }, boxed_warnings:{ type:'array', items:{type:'object'} } } }, sampleResult:{ drug_name:'DrugX', alert_type_checked:'ALL', active_alerts:[{ alert_type:'RECALL', date_issued:'2025-08-01', title:'Mock Recall', summary:'Potential impurity', action_required:'Quarantine stock', severity:'HIGH' }], recalls:[], boxed_warnings:[] } }
];

export function getTool(name: string) { return tools.find(t => t.name === name); }
export const toolSpecs = tools.map(t => ({ type:'function', name:t.name, description:t.description, parameters:t.argSchema, result_schema:t.resultSchema, sample_result:t.sampleResult }));
